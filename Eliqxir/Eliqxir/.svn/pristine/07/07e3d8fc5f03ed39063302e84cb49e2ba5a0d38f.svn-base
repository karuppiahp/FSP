package com.eliqxir.vendor;

import java.util.ArrayList;
import java.util.List;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Typeface;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.InputFilter;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.TextView;

import com.eliqxir.R;
import com.eliqxir.slidermenu.SlidingMenuActivity;
import com.eliqxir.support.ServerResponse;
import com.eliqxir.support.ServerResponse.RequestType;
import com.eliqxir.utils.Constant;
import com.eliqxir.utils.UrlGenerator;
import com.eliqxir.utils.Utils;
import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu;

public class AddDriver extends SlidingMenuActivity implements OnClickListener {

	ImageButton backImg, cartBtn, btnSlideMenu, btnForAddDriver;
	TextView textForHeader;
	EditText editTextForDriverFName, editTextForDriverLName,
			editTextForDriverEmail, editTextForDriverPhone,
			editTextForDriverPassword;
	Typeface appFont;
public void onStop()
{
	if(Constant.isVendorAvailable.equals("notAvailable"))
	{
		finish();
	}
	
	super.onStop();
	
}
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.add_driver);
		appFont = Typeface.createFromAsset(getAssets(), "OpenSans-Regular.ttf");
		btnSlideMenu = (ImageButton) findViewById(R.id.btnSliderMenu);
		backImg = (ImageButton) findViewById(R.id.backBtn);
		cartBtn = (ImageButton) findViewById(R.id.cartBtn);
		textForHeader = (TextView) findViewById(R.id.textForHeader);
		btnForAddDriver = (ImageButton) findViewById(R.id.btnForAddDriver);
		btnForAddDriver.setOnClickListener(this);
		btnSlideMenu.setVisibility(View.GONE);
		backImg.setVisibility(View.VISIBLE);
		backImg.setOnClickListener(this);
		cartBtn.setVisibility(View.GONE);
		editTextForDriverEmail = (EditText) findViewById(R.id.editTextForDriverEmail);
		editTextForDriverFName = (EditText) findViewById(R.id.editTextForDriverFName);
		editTextForDriverLName = (EditText) findViewById(R.id.editTextForDriverLName);
		editTextForDriverPassword = (EditText) findViewById(R.id.editTextForDriverPassword);
		editTextForDriverPhone = (EditText) findViewById(R.id.editTextForDriverPhone);
		editTextForDriverEmail.setTypeface(appFont);
		editTextForDriverFName.setTypeface(appFont);
		editTextForDriverLName.setTypeface(appFont);
		editTextForDriverPassword.setTypeface(appFont);
		editTextForDriverPhone.setTypeface(appFont);
		SlidingMenu sm = getSlidingMenu();
		sm.setMode(SlidingMenu.LEFT);
		getSlidingMenu().setTouchModeAbove(SlidingMenu.TOUCHMODE_NONE);
		textForHeader.setText("ADD DRIVER");
		

        editTextForDriverPhone.setFilters(new InputFilter[] { Constant.filter });
    
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		if (v.getId() == R.id.btnForAddDriver) {
			if (editTextForDriverEmail.getText().toString().trim().length() > 0
					&& editTextForDriverFName.getText().toString().trim()
							.length() > 0
					&& editTextForDriverLName.getText().toString().trim()
							.length() > 0
					&& editTextForDriverPassword.getText().toString().trim()
							.length() > 0
					&& editTextForDriverPhone.getText().toString().trim()
							.length() > 0) {
				if (Utils.isEmailValid(editTextForDriverEmail.getText()
						.toString().trim())) {
					boolean isOnline = Utils.isOnline();
					Log.e("isOnline", isOnline + "");
					if (isOnline) {
					new AddDrivers().execute();
					}
					else
					{
						Utils.ShowAlert(AddDriver.this, Constant.networkDisconected);
					}
				} else {
					Utils.ShowAlert(AddDriver.this,
							"Please enter a valid email.");

				}
			} else {
				Utils.ShowAlert(AddDriver.this, "Please enter all fields.");
			}

		} else if (v.getId() == R.id.backBtn) {
			finish();
		}
	}

	public class AddDrivers extends AsyncTask<Void, Void, Void> {
		ProgressDialog dialog;
		String status = "", error, itemQuantity = "";

		@Override
		protected void onPostExecute(Void result) {

			if (dialog.isShowing()) {
				dialog.dismiss();
			}

			try {

				if (status.equals("1")) {
					Utils.ShowAlert(AddDriver.this, "Driver added.");
					startActivity(new Intent(AddDriver.this,
							DriversActivity.class));
				} else {
					Utils.ShowAlert(AddDriver.this, error);
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			this.dialog = new ProgressDialog(AddDriver.this);
			this.dialog.setMessage("Loading..");
			this.dialog.show();
			this.dialog.setCancelable(false);

		}

		@Override
		protected Void doInBackground(Void... params) {
			List<NameValuePair> nameValuePair = new ArrayList<NameValuePair>(6);
			String driverName = editTextForDriverFName.getText().toString()
					.trim()
					+ editTextForDriverLName.getText().toString().trim();
			String driverFName = editTextForDriverFName.getText().toString()
					.trim();
			String driverLName = editTextForDriverLName.getText().toString()
					.trim();
			String driverEmail = editTextForDriverEmail.getText().toString()
					.trim();
			String driverPwd = editTextForDriverPassword.getText().toString()
					.trim();
			String driverPhone = editTextForDriverPhone.getText().toString()
					.trim();

			nameValuePair.add(new BasicNameValuePair("driver_username",
					driverName));
			nameValuePair.add(new BasicNameValuePair("driver_firstname",
					driverFName));
			nameValuePair.add(new BasicNameValuePair("driver_lastname",
					driverLName));
			nameValuePair.add(new BasicNameValuePair("driver_email",
					driverEmail));
			nameValuePair.add(new BasicNameValuePair("driver_password",
					driverPwd));
			nameValuePair.add(new BasicNameValuePair("driver_phone",
					driverPhone));
			JSONObject jsonObj = new ServerResponse(
					UrlGenerator.vendorAddDriver()).getJSONObjectfromURL(
					RequestType.POST, nameValuePair);

			try {
				if (jsonObj != null) {
					status = jsonObj.getString("status");
					if (status.equals("0")) {
						error = jsonObj.getString("Error");
					} else if (status.equals("1")) {

					}
				}
			} catch (JSONException e) {
				e.printStackTrace();
			}
			return null;
		}
	}

}
